# week08/.github/workflows/frontend-cd.yml

name: CD - Deploy Frontend to AKS

# This workflow can be called by other workflows and takes inputs.
# Or it can be run manually if you provide the IPs.
on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://172.214.0.63:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://51.8.45.234:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: '224005289aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'sit722devops224005289-rg'
 
  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

  # auto-run after Backend CD finishes successfully
  workflow_run:
    workflows: ["Backend CD"]
    types: [completed]

# prevent overlapping front-end deploys on the same ref
concurrency:
  group: frontend-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    # Only proceed on workflow_run if Backend CD concluded successfully
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # If triggered by Backend CD (workflow_run), resolve backend IPs from AKS automatically.
      # Uses repository/environment variables AKS_RG / AKS_CLUSTER if present.
      - name: Resolve backend IPs when triggered by Backend CD
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          echo "Resolving backend service IPs from AKS..."
          az login --identity >/dev/null 2>&1 || true
          az aks get-credentials \
            --resource-group "${{ vars.AKS_RG }}" \
            --name "${{ vars.AKS_CLUSTER }}" \
            --overwrite-existing

          PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
          ORDER_IP=$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP"     >> $GITHUB_ENV
          echo "Resolved Product IP: $PRODUCT_IP"
          echo "Resolved Order IP:   $ORDER_IP"

      # Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting IPs into frontend/static/js/main.js"
          PRODUCT_URL="${{ inputs.product_api_ip }}"
          ORDER_URL="${{ inputs.order_api_ip }}"
          if [ -z "$PRODUCT_URL" ]; then PRODUCT_URL="${PRODUCT_IP}"; fi
          if [ -z "$ORDER_URL" ]; then ORDER_URL="${ORDER_IP}"; fi

          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_URL}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_URL}|g"   frontend/main.js
          
          echo "--- Modified main.js content ---"
          cat frontend/main.js
          echo "--------------------------------"

      # Build and Push Docker image for Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest ./frontend/
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:latest

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          echo "Deploying frontend with latest tag to AKS cluster: ${{ inputs.aks_cluster_name }}"
          cd k8s/
          kubectl apply -f frontend.yaml

      - name: Logout from Azure (AKS deployment)
        run: az logout
